name: Bump Version

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: 'choice'
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (leave empty to use semver increment)'
        required: false
        type: 'string'
      create_tag:
        description: 'Automatically create and push tag?'
        required: true
        default: true
        type: 'boolean'

jobs:
  bump-version:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Set Git User
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -oP 'version = "\K[^"]+' pyproject.toml)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
      
      - name: Calculate new version
        id: new_version
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            # Use custom version if provided
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          else
            # Split current version into parts
            IFS='.' read -r -a version_parts <<< "${{ env.CURRENT_VERSION }}"
            MAJOR=${version_parts[0]}
            MINOR=${version_parts[1]}
            PATCH=${version_parts[2]}
            
            # Bump version according to input
            case "${{ github.event.inputs.version_type }}" in
              major)
                MAJOR=$((MAJOR+1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR+1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH+1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"
      
      - name: Update version in pyproject.toml
        run: |
          sed -i "s/version = \"${{ env.CURRENT_VERSION }}\"/version = \"${{ env.NEW_VERSION }}\"/" pyproject.toml
          echo "Updated pyproject.toml to version ${{ env.NEW_VERSION }}"
          cat pyproject.toml | grep version
      
      - name: Commit and push changes
        run: |
          git add pyproject.toml
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git push
      
      - name: Create and push tag
        if: ${{ github.event.inputs.create_tag == true }}
        run: |
          git tag v${{ env.NEW_VERSION }}
          git push origin v${{ env.NEW_VERSION }}
          echo "Created and pushed tag v${{ env.NEW_VERSION }}"
      
      - name: Tag creation skipped
        if: ${{ github.event.inputs.create_tag != true }}
        run: |
          echo "Tag creation was skipped. You can manually create a tag with: git tag v${{ env.NEW_VERSION }} && git push origin v${{ env.NEW_VERSION }}" 